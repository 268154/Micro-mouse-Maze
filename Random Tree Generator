import random
# used to randomize the tree each time
#creating the node
class Node:
    def __init__(self, x, y, level, parent=None):
        self.x = x
        self.y = y
        self.level = level
        self.parent = parent  # Keep track of the parent node
#creating function to create tree
def generate_tree(x, y, level, parent=None):
    if level > 4:  # Limit depth to 4
        return
    
    node = Node(x, y, level, parent)  # Create node
    
    if parent:
        print(f"Level {level}: ({x}, {y}) <- ({parent.x}, {parent.y})")  # Show connection to actual show tree
    else:
        print(f"Level {level}: ({x}, {y})")  # Root node
    
    num_descendants = random.randint(1, 3)  # Random number of branches
    directions = [(1, random.randint(1, 3)), (2, random.randint(1, 3)), (3, random.randint(1, 3))] #how the tree progresses

#pick a random direction to create new branches 
    for _ in range(num_descendants):
        new_x, new_y = x + directions[random.randint(0, 2)][0], y + directions[random.randint(0, 2)][1]
        generate_tree(new_x, new_y, level + 1, node)
        #create new levels
# Start the tree from (0,0)
generate_tree(0, 0, 1)

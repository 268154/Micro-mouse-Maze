import random
# used to randomize the tree each time

#creating the node
class Node:
    def __init__(self, x, y, level, parent=None):
        self.x = x
        self.y = y
        self.level = level
        self.parent = parent  # Keep track of the parent node

#creating function to create tree
def generate_tree(x, y, level, parent=None, direction=None):
    if level > 4:  # Limit depth to 4
        return
    
    node = Node(x, y, level, parent)  # Create node
    
    if parent:
        print(f"Level {level}: ({x}, {y}) <- ({parent.x}, {parent.y}) {direction}")  # Show connection and direction taken
    else:
        print(f"Level {level}: ({x}, {y})")  # Root node
    
    num_descendants = random.randint(1, 3)  # Random number of branches
    directions = [(1, random.randint(1, 3), "L"), (2, random.randint(1, 3), "C"), (3, random.randint(1, 3), "R")]  # Direction options

    # Pick a random direction to create new branches
    for _ in range(num_descendants):
        direction_index = random.randint(0, 2)  # Pick a random direction
        new_x, new_y, move_label = directions[direction_index]  # Extract values
        generate_tree(x + new_x, y + new_y, level + 1, node, move_label)  # Create new levels with correct direction

# Start the tree from (0,0)
generate_tree(0, 0, 1)
